'use strict';

// 

var mongoose = require('mongoose');
var Tournament = require('../../schemas/tournament');
var EloRank = require('elo-rank');
var elo = new EloRank(16);

module.exports.default = function (router) {
    // router.post('/create', upload.array('images', 32), (req, res) => {
    router.get('/tournament/:key', function (req, res) {
        Tournament.findOne({ key: req.params.key }, function (err, tournament) {
            if (err) res.send(503);
            var len = tournament.images.length;
            var leftId = Math.floor(Math.random() * len);
            var rightId = Math.floor(Math.random() * len);
            while (len > 0 && leftId === rightId) {
                rightId = Math.floor(Math.random() * len);
            }
            var data = {
                // csrfToken: req.csrfToken()
                key: req.params.key,
                title: tournament.title,
                description: tournament.description,
                left: tournament.images[leftId],
                right: tournament.images[rightId]
            };
            var vueOptions = {
                head: {
                    title: tournament.title + ' - ' + tournament.description
                }
            };
            res.renderVue('tournament/tournament', data, vueOptions);
        });
    });
    router.get('/tournament/:key/:winner/:loser', function (req, res) {
        Tournament.findOne({ key: req.params.key }, function (err, tournament) {
            if (err) res.send(503);
            if (tournament == null) res.json({ error: 'cannot find given key' });else {
                var winnerId = tournament.images.findIndex(function (img) {
                    return img.id === req.params.winner;
                });
                var loserId = tournament.images.findIndex(function (img) {
                    return img.id === req.params.loser;
                });
                var winnerOldScore = tournament.images[winnerId].score;
                var loserOldScore = tournament.images[loserId].score;
                var winnerExpectedScore = elo.getExpected(winnerOldScore, loserOldScore);
                var loserExpectedScore = elo.getExpected(loserOldScore, winnerOldScore);
                var winnerNewScore = elo.updateRating(winnerExpectedScore, 1, winnerOldScore);
                var loserNewScore = elo.updateRating(loserExpectedScore, 0, loserOldScore);
                tournament.images[winnerId].score = winnerNewScore;
                tournament.images[loserId].score = loserNewScore;
                var historyCount = tournament.history.length;
                tournament.history.push({
                    id: historyCount + 1,
                    winner: req.params.winner,
                    loser: req.params.loser
                });
                tournament.save(function (err, product) {
                    if (err) res.send(503);
                    res.redirect('/tournament/' + req.params.key);
                });
            }
        });
    });
};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
